#!/bin/bash

##################################################################
# Licensed Materials - Property of IBM
#  5737-I23
#  Copyright IBM Corp. 2020 - 2025. All Rights Reserved.
#  U.S. Government Users Restricted Rights:
#  Use, duplication or disclosure restricted by GSA ADP Schedule
#  Contract with IBM Corp.
##################################################################

set -e

CUR_DIR=$(cd "$(dirname "$0")"; pwd)
HOME_DIR="${CUR_DIR}/.."


function showHelp {
    echo -e "\nUsage: bai-import-index -u <Opensearch_username> -p <Opensearch_password> -k <Opensearch_URL>\n -c <ICP4A component name>"
    echo "Options:"
    echo "  -h  Display help"
    echo "  -u  Opensearch username"
    echo "  -p  Opensearch password"
    echo "  -k  Opensearch URL (On Docker: https://<Opensearch_hostname>:<Opensearch_port>' or"
    echo "      on Kubernetes: the Opensearch URL)"
    echo "  -c  The ICP4A component name ('bpmn' or 'periodic_odm')"
}

# initialize variables
unset OPENSEARCH_USER_NAME
unset OPENSEARCH_USER_PASSWORD
unset OPENSEARCH_URL
unset ICP4AComponent_Name

OPTIND=1  # Reset in case getopts has been used previously in the shell.

if [[ $1 == "" ]]
then
    showHelp
    exit 1
else
    while getopts ":hu:p:k:c:" opt; do
        case "$opt" in
        h|\?)
            showHelp
            exit 0
            ;;
        u)  OPENSEARCH_USER_NAME=${OPTARG}
            ;;
        p)  OPENSEARCH_USER_PASSWORD=${OPTARG}
            ;;
        k)  OPENSEARCH_URL=${OPTARG}
            ;;
        c)  ICP4AComponent_Name=${OPTARG}
            ;;
        :)  echo "Invalid option: -$OPTARG requires an argument"
            showHelp
            exit 1
            ;;
      esac
    done

fi

if [ -z "${OPENSEARCH_USER_NAME}" ]; then
    echo "No Opensearch user name defined."
    exit 1;
fi

if [ -z "${OPENSEARCH_USER_PASSWORD}" ]; then
    echo "No Opensearch user password defined."
    exit 1;
fi

if [ -z "${OPENSEARCH_URL}" ]; then
    echo "No Opensearch url defined."
    exit 1;
fi

if [ -z "${ICP4AComponent_Name}" ]; then
    echo "No ICP4A component directory defined."
    exit 1;
else
    PROPERTIES_FILE_PATH="${HOME_DIR}/conf/${ICP4AComponent_Name}.properties"
    # shellcheck source=/dev/null
    . "${PROPERTIES_FILE_PATH}"
fi

# Create the logs directory if necessary.
if [ ! -d "${HOME_DIR}/logs" ]; then
  mkdir "${HOME_DIR}/logs"
fi

for index_file_path in "${HOME_DIR}/data/${ICP4AComponent_Name}"/* ; do
  index_name="${index_file_path##*/}"
  index_name="${index_name%.*}"

  parametrized_file=$(envsubst < "${index_file_path}")

  # Prepare log file path for each index
  log_file="${HOME_DIR}/logs/${index_name}-upload.log"

  response=$(curl -k --user "${OPENSEARCH_USER_NAME}:${OPENSEARCH_USER_PASSWORD}" -XPOST "${OPENSEARCH_URL}/${index_name}/_bulk" \
    --data-binary @- -H "Content-Type: application/x-ndjson" <<< "${parametrized_file}" -w "%{http_code}" -o "$log_file")

  # Log the response HTTP code
  echo "HTTP response code: $response" >> "$log_file"

  if [[ "$response" -ne 200 ]] || grep -q '"status":400' "$log_file"; then
    echo "${index_name} index data injection in BAI failed."
    echo "Please check $log_file for more details"
  else
    echo "${index_name} index data correctly injected in BAI."
  fi
done